/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import org.oncokb.oncokb_curation.ApiException;
import org.oncokb.oncokb_curation.client.CompanionDiagnosticDevice;
import org.oncokb.oncokb_curation.client.CompanionDiagnosticDeviceCriteria;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CompanionDiagnosticDeviceResourceApi
 */
@Ignore
public class CompanionDiagnosticDeviceResourceApiTest {

    private final CompanionDiagnosticDeviceResourceApi api = new CompanionDiagnosticDeviceResourceApi();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void countCompanionDiagnosticDevicesTest() throws ApiException {
        CompanionDiagnosticDeviceCriteria criteria = null;
                Long response = api.countCompanionDiagnosticDevices(criteria);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCompanionDiagnosticDeviceTest() throws ApiException {
        CompanionDiagnosticDevice companionDiagnosticDevice = null;
                CompanionDiagnosticDevice response = api.createCompanionDiagnosticDevice(companionDiagnosticDevice);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCompanionDiagnosticDeviceTest() throws ApiException {
        Long id = null;
                api.deleteCompanionDiagnosticDevice(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllCompanionDiagnosticDevicesTest() throws ApiException {
        CompanionDiagnosticDeviceCriteria criteria = null;
                List<CompanionDiagnosticDevice> response = api.getAllCompanionDiagnosticDevices(criteria);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCompanionDiagnosticDeviceTest() throws ApiException {
        Long id = null;
                CompanionDiagnosticDevice response = api.getCompanionDiagnosticDevice(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partialUpdateCompanionDiagnosticDeviceTest() throws ApiException {
        Long id = null;
        CompanionDiagnosticDevice companionDiagnosticDevice = null;
                CompanionDiagnosticDevice response = api.partialUpdateCompanionDiagnosticDevice(id, companionDiagnosticDevice);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchCompanionDiagnosticDevicesTest() throws ApiException {
        String query = null;
                List<CompanionDiagnosticDevice> response = api.searchCompanionDiagnosticDevices(query);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCompanionDiagnosticDeviceTest() throws ApiException {
        Long id = null;
        CompanionDiagnosticDevice companionDiagnosticDevice = null;
                CompanionDiagnosticDevice response = api.updateCompanionDiagnosticDevice(id, companionDiagnosticDevice);
        // TODO: test validations
    }
    
}
