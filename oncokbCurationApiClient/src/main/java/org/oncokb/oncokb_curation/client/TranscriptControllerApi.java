/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import org.oncokb.oncokb_curation.ApiCallback;
import org.oncokb.oncokb_curation.ApiClient;
import org.oncokb.oncokb_curation.ApiException;
import org.oncokb.oncokb_curation.ApiResponse;
import org.oncokb.oncokb_curation.Configuration;
import org.oncokb.oncokb_curation.Pair;
import org.oncokb.oncokb_curation.ProgressRequestBody;
import org.oncokb.oncokb_curation.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.oncokb_curation.client.AddTranscriptBody;
import org.oncokb.oncokb_curation.client.AllReferenceTranscriptSuggestionVM;
import org.oncokb.oncokb_curation.client.MatchTranscriptVM;
import org.oncokb.oncokb_curation.client.TranscriptComparisonResultVM;
import org.oncokb.oncokb_curation.client.TranscriptComparisonVM;
import org.oncokb.oncokb_curation.client.TranscriptDTO;
import org.oncokb.oncokb_curation.client.TranscriptMatchResultVM;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranscriptControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TranscriptControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranscriptControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addTranscript
     * @param addTranscriptBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTranscriptCall(AddTranscriptBody addTranscriptBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addTranscriptBody;

        // create path and map variables
        String localVarPath = "/api/add-transcript";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTranscriptValidateBeforeCall(AddTranscriptBody addTranscriptBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'addTranscriptBody' is set
        if (addTranscriptBody == null) {
            throw new ApiException("Missing the required parameter 'addTranscriptBody' when calling addTranscript(Async)");
        }
        

        okhttp3.Call localVarCall = addTranscriptCall(addTranscriptBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param addTranscriptBody  (required)
     * @return TranscriptDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TranscriptDTO addTranscript(AddTranscriptBody addTranscriptBody) throws ApiException {
        ApiResponse<TranscriptDTO> localVarResp = addTranscriptWithHttpInfo(addTranscriptBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param addTranscriptBody  (required)
     * @return ApiResponse&lt;TranscriptDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranscriptDTO> addTranscriptWithHttpInfo(AddTranscriptBody addTranscriptBody) throws ApiException {
        okhttp3.Call localVarCall = addTranscriptValidateBeforeCall(addTranscriptBody, null);
        Type localVarReturnType = new TypeToken<TranscriptDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param addTranscriptBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTranscriptAsync(AddTranscriptBody addTranscriptBody, final ApiCallback<TranscriptDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTranscriptValidateBeforeCall(addTranscriptBody, _callback);
        Type localVarReturnType = new TypeToken<TranscriptDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compareTranscript
     * @param hugoSymbol  (required)
     * @param transcriptComparisonVM  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareTranscriptCall(String hugoSymbol, TranscriptComparisonVM transcriptComparisonVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transcriptComparisonVM;

        // create path and map variables
        String localVarPath = "/api/compare-transcript/{hugoSymbol}"
            .replaceAll("\\{" + "hugoSymbol" + "\\}", localVarApiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compareTranscriptValidateBeforeCall(String hugoSymbol, TranscriptComparisonVM transcriptComparisonVM, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling compareTranscript(Async)");
        }
        
        // verify the required parameter 'transcriptComparisonVM' is set
        if (transcriptComparisonVM == null) {
            throw new ApiException("Missing the required parameter 'transcriptComparisonVM' when calling compareTranscript(Async)");
        }
        

        okhttp3.Call localVarCall = compareTranscriptCall(hugoSymbol, transcriptComparisonVM, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param transcriptComparisonVM  (required)
     * @return TranscriptComparisonResultVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TranscriptComparisonResultVM compareTranscript(String hugoSymbol, TranscriptComparisonVM transcriptComparisonVM) throws ApiException {
        ApiResponse<TranscriptComparisonResultVM> localVarResp = compareTranscriptWithHttpInfo(hugoSymbol, transcriptComparisonVM);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param transcriptComparisonVM  (required)
     * @return ApiResponse&lt;TranscriptComparisonResultVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranscriptComparisonResultVM> compareTranscriptWithHttpInfo(String hugoSymbol, TranscriptComparisonVM transcriptComparisonVM) throws ApiException {
        okhttp3.Call localVarCall = compareTranscriptValidateBeforeCall(hugoSymbol, transcriptComparisonVM, null);
        Type localVarReturnType = new TypeToken<TranscriptComparisonResultVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hugoSymbol  (required)
     * @param transcriptComparisonVM  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compareTranscriptAsync(String hugoSymbol, TranscriptComparisonVM transcriptComparisonVM, final ApiCallback<TranscriptComparisonResultVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = compareTranscriptValidateBeforeCall(hugoSymbol, transcriptComparisonVM, _callback);
        Type localVarReturnType = new TypeToken<TranscriptComparisonResultVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findTranscriptsByEnsemblIds
     * @param referenceGenome  (required)
     * @param requestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTranscriptsByEnsemblIdsCall(String referenceGenome, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/find-transcripts-by-ensembl-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceGenome != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referenceGenome", referenceGenome));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findTranscriptsByEnsemblIdsValidateBeforeCall(String referenceGenome, List<String> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'referenceGenome' is set
        if (referenceGenome == null) {
            throw new ApiException("Missing the required parameter 'referenceGenome' when calling findTranscriptsByEnsemblIds(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling findTranscriptsByEnsemblIds(Async)");
        }
        

        okhttp3.Call localVarCall = findTranscriptsByEnsemblIdsCall(referenceGenome, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param referenceGenome  (required)
     * @param requestBody  (required)
     * @return List&lt;TranscriptDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<TranscriptDTO> findTranscriptsByEnsemblIds(String referenceGenome, List<String> requestBody) throws ApiException {
        ApiResponse<List<TranscriptDTO>> localVarResp = findTranscriptsByEnsemblIdsWithHttpInfo(referenceGenome, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param referenceGenome  (required)
     * @param requestBody  (required)
     * @return ApiResponse&lt;List&lt;TranscriptDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TranscriptDTO>> findTranscriptsByEnsemblIdsWithHttpInfo(String referenceGenome, List<String> requestBody) throws ApiException {
        okhttp3.Call localVarCall = findTranscriptsByEnsemblIdsValidateBeforeCall(referenceGenome, requestBody, null);
        Type localVarReturnType = new TypeToken<List<TranscriptDTO>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param referenceGenome  (required)
     * @param requestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findTranscriptsByEnsemblIdsAsync(String referenceGenome, List<String> requestBody, final ApiCallback<List<TranscriptDTO>> _callback) throws ApiException {

        okhttp3.Call localVarCall = findTranscriptsByEnsemblIdsValidateBeforeCall(referenceGenome, requestBody, _callback);
        Type localVarReturnType = new TypeToken<List<TranscriptDTO>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for matchTranscript
     * @param hugoSymbol  (required)
     * @param matchTranscriptVM  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchTranscriptCall(String hugoSymbol, MatchTranscriptVM matchTranscriptVM, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = matchTranscriptVM;

        // create path and map variables
        String localVarPath = "/api/match-transcript/{hugoSymbol}"
            .replaceAll("\\{" + "hugoSymbol" + "\\}", localVarApiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call matchTranscriptValidateBeforeCall(String hugoSymbol, MatchTranscriptVM matchTranscriptVM, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling matchTranscript(Async)");
        }
        
        // verify the required parameter 'matchTranscriptVM' is set
        if (matchTranscriptVM == null) {
            throw new ApiException("Missing the required parameter 'matchTranscriptVM' when calling matchTranscript(Async)");
        }
        

        okhttp3.Call localVarCall = matchTranscriptCall(hugoSymbol, matchTranscriptVM, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param matchTranscriptVM  (required)
     * @return TranscriptMatchResultVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public TranscriptMatchResultVM matchTranscript(String hugoSymbol, MatchTranscriptVM matchTranscriptVM) throws ApiException {
        ApiResponse<TranscriptMatchResultVM> localVarResp = matchTranscriptWithHttpInfo(hugoSymbol, matchTranscriptVM);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param matchTranscriptVM  (required)
     * @return ApiResponse&lt;TranscriptMatchResultVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TranscriptMatchResultVM> matchTranscriptWithHttpInfo(String hugoSymbol, MatchTranscriptVM matchTranscriptVM) throws ApiException {
        okhttp3.Call localVarCall = matchTranscriptValidateBeforeCall(hugoSymbol, matchTranscriptVM, null);
        Type localVarReturnType = new TypeToken<TranscriptMatchResultVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hugoSymbol  (required)
     * @param matchTranscriptVM  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call matchTranscriptAsync(String hugoSymbol, MatchTranscriptVM matchTranscriptVM, final ApiCallback<TranscriptMatchResultVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = matchTranscriptValidateBeforeCall(hugoSymbol, matchTranscriptVM, _callback);
        Type localVarReturnType = new TypeToken<TranscriptMatchResultVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for suggestVariant
     * @param hugoSymbol  (required)
     * @param proteinPosition  (required)
     * @param curatedResidue  (required)
     * @param grch37Transcript  (required)
     * @param grch38Transcript  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestVariantCall(String hugoSymbol, Integer proteinPosition, String curatedResidue, String grch37Transcript, String grch38Transcript, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/suggest-variant/{hugoSymbol}"
            .replaceAll("\\{" + "hugoSymbol" + "\\}", localVarApiClient.escapeString(hugoSymbol.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (proteinPosition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("proteinPosition", proteinPosition));
        }

        if (curatedResidue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("curatedResidue", curatedResidue));
        }

        if (grch37Transcript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grch37Transcript", grch37Transcript));
        }

        if (grch38Transcript != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("grch38Transcript", grch38Transcript));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call suggestVariantValidateBeforeCall(String hugoSymbol, Integer proteinPosition, String curatedResidue, String grch37Transcript, String grch38Transcript, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hugoSymbol' is set
        if (hugoSymbol == null) {
            throw new ApiException("Missing the required parameter 'hugoSymbol' when calling suggestVariant(Async)");
        }
        
        // verify the required parameter 'proteinPosition' is set
        if (proteinPosition == null) {
            throw new ApiException("Missing the required parameter 'proteinPosition' when calling suggestVariant(Async)");
        }
        
        // verify the required parameter 'curatedResidue' is set
        if (curatedResidue == null) {
            throw new ApiException("Missing the required parameter 'curatedResidue' when calling suggestVariant(Async)");
        }
        
        // verify the required parameter 'grch37Transcript' is set
        if (grch37Transcript == null) {
            throw new ApiException("Missing the required parameter 'grch37Transcript' when calling suggestVariant(Async)");
        }
        
        // verify the required parameter 'grch38Transcript' is set
        if (grch38Transcript == null) {
            throw new ApiException("Missing the required parameter 'grch38Transcript' when calling suggestVariant(Async)");
        }
        

        okhttp3.Call localVarCall = suggestVariantCall(hugoSymbol, proteinPosition, curatedResidue, grch37Transcript, grch38Transcript, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param proteinPosition  (required)
     * @param curatedResidue  (required)
     * @param grch37Transcript  (required)
     * @param grch38Transcript  (required)
     * @return AllReferenceTranscriptSuggestionVM
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AllReferenceTranscriptSuggestionVM suggestVariant(String hugoSymbol, Integer proteinPosition, String curatedResidue, String grch37Transcript, String grch38Transcript) throws ApiException {
        ApiResponse<AllReferenceTranscriptSuggestionVM> localVarResp = suggestVariantWithHttpInfo(hugoSymbol, proteinPosition, curatedResidue, grch37Transcript, grch38Transcript);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hugoSymbol  (required)
     * @param proteinPosition  (required)
     * @param curatedResidue  (required)
     * @param grch37Transcript  (required)
     * @param grch38Transcript  (required)
     * @return ApiResponse&lt;AllReferenceTranscriptSuggestionVM&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllReferenceTranscriptSuggestionVM> suggestVariantWithHttpInfo(String hugoSymbol, Integer proteinPosition, String curatedResidue, String grch37Transcript, String grch38Transcript) throws ApiException {
        okhttp3.Call localVarCall = suggestVariantValidateBeforeCall(hugoSymbol, proteinPosition, curatedResidue, grch37Transcript, grch38Transcript, null);
        Type localVarReturnType = new TypeToken<AllReferenceTranscriptSuggestionVM>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hugoSymbol  (required)
     * @param proteinPosition  (required)
     * @param curatedResidue  (required)
     * @param grch37Transcript  (required)
     * @param grch38Transcript  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call suggestVariantAsync(String hugoSymbol, Integer proteinPosition, String curatedResidue, String grch37Transcript, String grch38Transcript, final ApiCallback<AllReferenceTranscriptSuggestionVM> _callback) throws ApiException {

        okhttp3.Call localVarCall = suggestVariantValidateBeforeCall(hugoSymbol, proteinPosition, curatedResidue, grch37Transcript, grch38Transcript, _callback);
        Type localVarReturnType = new TypeToken<AllReferenceTranscriptSuggestionVM>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
