/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.oncokb.oncokb_curation.client.TranscriptPairVM;
import java.io.Serializable;

/**
 * MatchTranscriptVM
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class MatchTranscriptVM implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private TranscriptPairVM transcript;

  /**
   * Gets or Sets targetReferenceGenome
   */
  @JsonAdapter(TargetReferenceGenomeEnum.Adapter.class)
  public enum TargetReferenceGenomeEnum {
    GRCH37("GRCh37"),
    
    GRCH38("GRCh38");

    private String value;

    TargetReferenceGenomeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetReferenceGenomeEnum fromValue(String value) {
      for (TargetReferenceGenomeEnum b : TargetReferenceGenomeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetReferenceGenomeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetReferenceGenomeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetReferenceGenomeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetReferenceGenomeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TARGET_REFERENCE_GENOME = "targetReferenceGenome";
  @SerializedName(SERIALIZED_NAME_TARGET_REFERENCE_GENOME)
  private TargetReferenceGenomeEnum targetReferenceGenome;

  public MatchTranscriptVM() { 
  }

  public MatchTranscriptVM transcript(TranscriptPairVM transcript) {
    
    this.transcript = transcript;
    return this;
  }

   /**
   * Get transcript
   * @return transcript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TranscriptPairVM getTranscript() {
    return transcript;
  }


  public void setTranscript(TranscriptPairVM transcript) {
    this.transcript = transcript;
  }


  public MatchTranscriptVM targetReferenceGenome(TargetReferenceGenomeEnum targetReferenceGenome) {
    
    this.targetReferenceGenome = targetReferenceGenome;
    return this;
  }

   /**
   * Get targetReferenceGenome
   * @return targetReferenceGenome
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TargetReferenceGenomeEnum getTargetReferenceGenome() {
    return targetReferenceGenome;
  }


  public void setTargetReferenceGenome(TargetReferenceGenomeEnum targetReferenceGenome) {
    this.targetReferenceGenome = targetReferenceGenome;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchTranscriptVM matchTranscriptVM = (MatchTranscriptVM) o;
    return Objects.equals(this.transcript, matchTranscriptVM.transcript) &&
        Objects.equals(this.targetReferenceGenome, matchTranscriptVM.targetReferenceGenome);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transcript, targetReferenceGenome);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchTranscriptVM {\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    targetReferenceGenome: ").append(toIndentedString(targetReferenceGenome)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

