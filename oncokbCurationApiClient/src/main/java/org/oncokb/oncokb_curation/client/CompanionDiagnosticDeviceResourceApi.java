/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import org.oncokb.oncokb_curation.ApiCallback;
import org.oncokb.oncokb_curation.ApiClient;
import org.oncokb.oncokb_curation.ApiException;
import org.oncokb.oncokb_curation.ApiResponse;
import org.oncokb.oncokb_curation.Configuration;
import org.oncokb.oncokb_curation.Pair;
import org.oncokb.oncokb_curation.ProgressRequestBody;
import org.oncokb.oncokb_curation.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.oncokb_curation.client.CompanionDiagnosticDevice;
import org.oncokb.oncokb_curation.client.CompanionDiagnosticDeviceCriteria;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompanionDiagnosticDeviceResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompanionDiagnosticDeviceResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompanionDiagnosticDeviceResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for countCompanionDiagnosticDevices
     * @param criteria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countCompanionDiagnosticDevicesCall(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countCompanionDiagnosticDevicesValidateBeforeCall(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling countCompanionDiagnosticDevices(Async)");
        }
        

        okhttp3.Call localVarCall = countCompanionDiagnosticDevicesCall(criteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long countCompanionDiagnosticDevices(CompanionDiagnosticDeviceCriteria criteria) throws ApiException {
        ApiResponse<Long> localVarResp = countCompanionDiagnosticDevicesWithHttpInfo(criteria);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> countCompanionDiagnosticDevicesWithHttpInfo(CompanionDiagnosticDeviceCriteria criteria) throws ApiException {
        okhttp3.Call localVarCall = countCompanionDiagnosticDevicesValidateBeforeCall(criteria, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param criteria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countCompanionDiagnosticDevicesAsync(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = countCompanionDiagnosticDevicesValidateBeforeCall(criteria, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCompanionDiagnosticDevice
     * @param companionDiagnosticDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCompanionDiagnosticDeviceCall(CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companionDiagnosticDevice;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanionDiagnosticDeviceValidateBeforeCall(CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'companionDiagnosticDevice' is set
        if (companionDiagnosticDevice == null) {
            throw new ApiException("Missing the required parameter 'companionDiagnosticDevice' when calling createCompanionDiagnosticDevice(Async)");
        }
        

        okhttp3.Call localVarCall = createCompanionDiagnosticDeviceCall(companionDiagnosticDevice, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param companionDiagnosticDevice  (required)
     * @return CompanionDiagnosticDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompanionDiagnosticDevice createCompanionDiagnosticDevice(CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        ApiResponse<CompanionDiagnosticDevice> localVarResp = createCompanionDiagnosticDeviceWithHttpInfo(companionDiagnosticDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param companionDiagnosticDevice  (required)
     * @return ApiResponse&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanionDiagnosticDevice> createCompanionDiagnosticDeviceWithHttpInfo(CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        okhttp3.Call localVarCall = createCompanionDiagnosticDeviceValidateBeforeCall(companionDiagnosticDevice, null);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param companionDiagnosticDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCompanionDiagnosticDeviceAsync(CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback<CompanionDiagnosticDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanionDiagnosticDeviceValidateBeforeCall(companionDiagnosticDevice, _callback);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCompanionDiagnosticDevice
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompanionDiagnosticDeviceCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCompanionDiagnosticDeviceValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCompanionDiagnosticDevice(Async)");
        }
        

        okhttp3.Call localVarCall = deleteCompanionDiagnosticDeviceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCompanionDiagnosticDevice(Long id) throws ApiException {
        deleteCompanionDiagnosticDeviceWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCompanionDiagnosticDeviceWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteCompanionDiagnosticDeviceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCompanionDiagnosticDeviceAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCompanionDiagnosticDeviceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllCompanionDiagnosticDevices
     * @param criteria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCompanionDiagnosticDevicesCall(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllCompanionDiagnosticDevicesValidateBeforeCall(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling getAllCompanionDiagnosticDevices(Async)");
        }
        

        okhttp3.Call localVarCall = getAllCompanionDiagnosticDevicesCall(criteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return List&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CompanionDiagnosticDevice> getAllCompanionDiagnosticDevices(CompanionDiagnosticDeviceCriteria criteria) throws ApiException {
        ApiResponse<List<CompanionDiagnosticDevice>> localVarResp = getAllCompanionDiagnosticDevicesWithHttpInfo(criteria);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return ApiResponse&lt;List&lt;CompanionDiagnosticDevice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompanionDiagnosticDevice>> getAllCompanionDiagnosticDevicesWithHttpInfo(CompanionDiagnosticDeviceCriteria criteria) throws ApiException {
        okhttp3.Call localVarCall = getAllCompanionDiagnosticDevicesValidateBeforeCall(criteria, null);
        Type localVarReturnType = new TypeToken<List<CompanionDiagnosticDevice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param criteria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllCompanionDiagnosticDevicesAsync(CompanionDiagnosticDeviceCriteria criteria, final ApiCallback<List<CompanionDiagnosticDevice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllCompanionDiagnosticDevicesValidateBeforeCall(criteria, _callback);
        Type localVarReturnType = new TypeToken<List<CompanionDiagnosticDevice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompanionDiagnosticDevice
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanionDiagnosticDeviceCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanionDiagnosticDeviceValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getCompanionDiagnosticDevice(Async)");
        }
        

        okhttp3.Call localVarCall = getCompanionDiagnosticDeviceCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return CompanionDiagnosticDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompanionDiagnosticDevice getCompanionDiagnosticDevice(Long id) throws ApiException {
        ApiResponse<CompanionDiagnosticDevice> localVarResp = getCompanionDiagnosticDeviceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanionDiagnosticDevice> getCompanionDiagnosticDeviceWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getCompanionDiagnosticDeviceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompanionDiagnosticDeviceAsync(Long id, final ApiCallback<CompanionDiagnosticDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanionDiagnosticDeviceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialUpdateCompanionDiagnosticDevice
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateCompanionDiagnosticDeviceCall(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companionDiagnosticDevice;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateCompanionDiagnosticDeviceValidateBeforeCall(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partialUpdateCompanionDiagnosticDevice(Async)");
        }
        
        // verify the required parameter 'companionDiagnosticDevice' is set
        if (companionDiagnosticDevice == null) {
            throw new ApiException("Missing the required parameter 'companionDiagnosticDevice' when calling partialUpdateCompanionDiagnosticDevice(Async)");
        }
        

        okhttp3.Call localVarCall = partialUpdateCompanionDiagnosticDeviceCall(id, companionDiagnosticDevice, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @return CompanionDiagnosticDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompanionDiagnosticDevice partialUpdateCompanionDiagnosticDevice(Long id, CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        ApiResponse<CompanionDiagnosticDevice> localVarResp = partialUpdateCompanionDiagnosticDeviceWithHttpInfo(id, companionDiagnosticDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @return ApiResponse&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanionDiagnosticDevice> partialUpdateCompanionDiagnosticDeviceWithHttpInfo(Long id, CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateCompanionDiagnosticDeviceValidateBeforeCall(id, companionDiagnosticDevice, null);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateCompanionDiagnosticDeviceAsync(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback<CompanionDiagnosticDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateCompanionDiagnosticDeviceValidateBeforeCall(id, companionDiagnosticDevice, _callback);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCompanionDiagnosticDevices
     * @param query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanionDiagnosticDevicesCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/_search/companion-diagnostic-devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCompanionDiagnosticDevicesValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchCompanionDiagnosticDevices(Async)");
        }
        

        okhttp3.Call localVarCall = searchCompanionDiagnosticDevicesCall(query, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param query  (required)
     * @return List&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<CompanionDiagnosticDevice> searchCompanionDiagnosticDevices(String query) throws ApiException {
        ApiResponse<List<CompanionDiagnosticDevice>> localVarResp = searchCompanionDiagnosticDevicesWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (required)
     * @return ApiResponse&lt;List&lt;CompanionDiagnosticDevice&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CompanionDiagnosticDevice>> searchCompanionDiagnosticDevicesWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = searchCompanionDiagnosticDevicesValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<CompanionDiagnosticDevice>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCompanionDiagnosticDevicesAsync(String query, final ApiCallback<List<CompanionDiagnosticDevice>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCompanionDiagnosticDevicesValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<CompanionDiagnosticDevice>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCompanionDiagnosticDevice
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanionDiagnosticDeviceCall(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = companionDiagnosticDevice;

        // create path and map variables
        String localVarPath = "/api/companion-diagnostic-devices/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCompanionDiagnosticDeviceValidateBeforeCall(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCompanionDiagnosticDevice(Async)");
        }
        
        // verify the required parameter 'companionDiagnosticDevice' is set
        if (companionDiagnosticDevice == null) {
            throw new ApiException("Missing the required parameter 'companionDiagnosticDevice' when calling updateCompanionDiagnosticDevice(Async)");
        }
        

        okhttp3.Call localVarCall = updateCompanionDiagnosticDeviceCall(id, companionDiagnosticDevice, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @return CompanionDiagnosticDevice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CompanionDiagnosticDevice updateCompanionDiagnosticDevice(Long id, CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        ApiResponse<CompanionDiagnosticDevice> localVarResp = updateCompanionDiagnosticDeviceWithHttpInfo(id, companionDiagnosticDevice);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @return ApiResponse&lt;CompanionDiagnosticDevice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanionDiagnosticDevice> updateCompanionDiagnosticDeviceWithHttpInfo(Long id, CompanionDiagnosticDevice companionDiagnosticDevice) throws ApiException {
        okhttp3.Call localVarCall = updateCompanionDiagnosticDeviceValidateBeforeCall(id, companionDiagnosticDevice, null);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param companionDiagnosticDevice  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCompanionDiagnosticDeviceAsync(Long id, CompanionDiagnosticDevice companionDiagnosticDevice, final ApiCallback<CompanionDiagnosticDevice> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCompanionDiagnosticDeviceValidateBeforeCall(id, companionDiagnosticDevice, _callback);
        Type localVarReturnType = new TypeToken<CompanionDiagnosticDevice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
