/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * StringFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class StringFilter implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String SERIALIZED_NAME_EQUALS = "equals";
  @SerializedName(SERIALIZED_NAME_EQUALS)
  private String equals;

  public static final String SERIALIZED_NAME_NOT_EQUALS = "notEquals";
  @SerializedName(SERIALIZED_NAME_NOT_EQUALS)
  private String notEquals;

  public static final String SERIALIZED_NAME_SPECIFIED = "specified";
  @SerializedName(SERIALIZED_NAME_SPECIFIED)
  private Boolean specified;

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private List<String> in = null;

  public static final String SERIALIZED_NAME_NOT_IN = "notIn";
  @SerializedName(SERIALIZED_NAME_NOT_IN)
  private List<String> notIn = null;

  public static final String SERIALIZED_NAME_CONTAINS = "contains";
  @SerializedName(SERIALIZED_NAME_CONTAINS)
  private String contains;

  public static final String SERIALIZED_NAME_DOES_NOT_CONTAIN = "doesNotContain";
  @SerializedName(SERIALIZED_NAME_DOES_NOT_CONTAIN)
  private String doesNotContain;

  public StringFilter() { 
  }

  public StringFilter equals(String equals) {
    
    this.equals = equals;
    return this;
  }

   /**
   * Get equals
   * @return equals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEquals() {
    return equals;
  }


  public void setEquals(String equals) {
    this.equals = equals;
  }


  public StringFilter notEquals(String notEquals) {
    
    this.notEquals = notEquals;
    return this;
  }

   /**
   * Get notEquals
   * @return notEquals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNotEquals() {
    return notEquals;
  }


  public void setNotEquals(String notEquals) {
    this.notEquals = notEquals;
  }


  public StringFilter specified(Boolean specified) {
    
    this.specified = specified;
    return this;
  }

   /**
   * Get specified
   * @return specified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSpecified() {
    return specified;
  }


  public void setSpecified(Boolean specified) {
    this.specified = specified;
  }


  public StringFilter in(List<String> in) {
    
    this.in = in;
    return this;
  }

  public StringFilter addInItem(String inItem) {
    if (this.in == null) {
      this.in = new ArrayList<String>();
    }
    this.in.add(inItem);
    return this;
  }

   /**
   * Get in
   * @return in
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getIn() {
    return in;
  }


  public void setIn(List<String> in) {
    this.in = in;
  }


  public StringFilter notIn(List<String> notIn) {
    
    this.notIn = notIn;
    return this;
  }

  public StringFilter addNotInItem(String notInItem) {
    if (this.notIn == null) {
      this.notIn = new ArrayList<String>();
    }
    this.notIn.add(notInItem);
    return this;
  }

   /**
   * Get notIn
   * @return notIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getNotIn() {
    return notIn;
  }


  public void setNotIn(List<String> notIn) {
    this.notIn = notIn;
  }


  public StringFilter contains(String contains) {
    
    this.contains = contains;
    return this;
  }

   /**
   * Get contains
   * @return contains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContains() {
    return contains;
  }


  public void setContains(String contains) {
    this.contains = contains;
  }


  public StringFilter doesNotContain(String doesNotContain) {
    
    this.doesNotContain = doesNotContain;
    return this;
  }

   /**
   * Get doesNotContain
   * @return doesNotContain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDoesNotContain() {
    return doesNotContain;
  }


  public void setDoesNotContain(String doesNotContain) {
    this.doesNotContain = doesNotContain;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringFilter stringFilter = (StringFilter) o;
    return Objects.equals(this.equals, stringFilter.equals) &&
        Objects.equals(this.notEquals, stringFilter.notEquals) &&
        Objects.equals(this.specified, stringFilter.specified) &&
        Objects.equals(this.in, stringFilter.in) &&
        Objects.equals(this.notIn, stringFilter.notIn) &&
        Objects.equals(this.contains, stringFilter.contains) &&
        Objects.equals(this.doesNotContain, stringFilter.doesNotContain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equals, notEquals, specified, in, notIn, contains, doesNotContain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringFilter {\n");
    sb.append("    equals: ").append(toIndentedString(equals)).append("\n");
    sb.append("    notEquals: ").append(toIndentedString(notEquals)).append("\n");
    sb.append("    specified: ").append(toIndentedString(specified)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    notIn: ").append(toIndentedString(notIn)).append("\n");
    sb.append("    contains: ").append(toIndentedString(contains)).append("\n");
    sb.append("    doesNotContain: ").append(toIndentedString(doesNotContain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

