/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import org.oncokb.oncokb_curation.ApiCallback;
import org.oncokb.oncokb_curation.ApiClient;
import org.oncokb.oncokb_curation.ApiException;
import org.oncokb.oncokb_curation.ApiResponse;
import org.oncokb.oncokb_curation.Configuration;
import org.oncokb.oncokb_curation.Pair;
import org.oncokb.oncokb_curation.ProgressRequestBody;
import org.oncokb.oncokb_curation.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.oncokb.oncokb_curation.client.ClinicalTrialsGovCondition;
import org.oncokb.oncokb_curation.client.ClinicalTrialsGovConditionCriteria;
import org.oncokb.oncokb_curation.client.Pageable;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClinicalTrialsGovConditionResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ClinicalTrialsGovConditionResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClinicalTrialsGovConditionResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for countClinicalTrialsGovConditions
     * @param criteria  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countClinicalTrialsGovConditionsCall(ClinicalTrialsGovConditionCriteria criteria, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countClinicalTrialsGovConditionsValidateBeforeCall(ClinicalTrialsGovConditionCriteria criteria, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling countClinicalTrialsGovConditions(Async)");
        }
        

        okhttp3.Call localVarCall = countClinicalTrialsGovConditionsCall(criteria, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return Long
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Long countClinicalTrialsGovConditions(ClinicalTrialsGovConditionCriteria criteria) throws ApiException {
        ApiResponse<Long> localVarResp = countClinicalTrialsGovConditionsWithHttpInfo(criteria);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @return ApiResponse&lt;Long&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Long> countClinicalTrialsGovConditionsWithHttpInfo(ClinicalTrialsGovConditionCriteria criteria) throws ApiException {
        okhttp3.Call localVarCall = countClinicalTrialsGovConditionsValidateBeforeCall(criteria, null);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param criteria  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countClinicalTrialsGovConditionsAsync(ClinicalTrialsGovConditionCriteria criteria, final ApiCallback<Long> _callback) throws ApiException {

        okhttp3.Call localVarCall = countClinicalTrialsGovConditionsValidateBeforeCall(criteria, _callback);
        Type localVarReturnType = new TypeToken<Long>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClinicalTrialsGovCondition
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClinicalTrialsGovConditionCall(ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clinicalTrialsGovCondition;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClinicalTrialsGovConditionValidateBeforeCall(ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clinicalTrialsGovCondition' is set
        if (clinicalTrialsGovCondition == null) {
            throw new ApiException("Missing the required parameter 'clinicalTrialsGovCondition' when calling createClinicalTrialsGovCondition(Async)");
        }
        

        okhttp3.Call localVarCall = createClinicalTrialsGovConditionCall(clinicalTrialsGovCondition, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param clinicalTrialsGovCondition  (required)
     * @return ClinicalTrialsGovCondition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClinicalTrialsGovCondition createClinicalTrialsGovCondition(ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        ApiResponse<ClinicalTrialsGovCondition> localVarResp = createClinicalTrialsGovConditionWithHttpInfo(clinicalTrialsGovCondition);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clinicalTrialsGovCondition  (required)
     * @return ApiResponse&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClinicalTrialsGovCondition> createClinicalTrialsGovConditionWithHttpInfo(ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        okhttp3.Call localVarCall = createClinicalTrialsGovConditionValidateBeforeCall(clinicalTrialsGovCondition, null);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClinicalTrialsGovConditionAsync(ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback<ClinicalTrialsGovCondition> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClinicalTrialsGovConditionValidateBeforeCall(clinicalTrialsGovCondition, _callback);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteClinicalTrialsGovCondition
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClinicalTrialsGovConditionCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClinicalTrialsGovConditionValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteClinicalTrialsGovCondition(Async)");
        }
        

        okhttp3.Call localVarCall = deleteClinicalTrialsGovConditionCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deleteClinicalTrialsGovCondition(Long id) throws ApiException {
        deleteClinicalTrialsGovConditionWithHttpInfo(id);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteClinicalTrialsGovConditionWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = deleteClinicalTrialsGovConditionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClinicalTrialsGovConditionAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClinicalTrialsGovConditionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllClinicalTrialsGovConditions
     * @param criteria  (required)
     * @param pageable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllClinicalTrialsGovConditionsCall(ClinicalTrialsGovConditionCriteria criteria, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (criteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("criteria", criteria));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllClinicalTrialsGovConditionsValidateBeforeCall(ClinicalTrialsGovConditionCriteria criteria, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'criteria' is set
        if (criteria == null) {
            throw new ApiException("Missing the required parameter 'criteria' when calling getAllClinicalTrialsGovConditions(Async)");
        }
        
        // verify the required parameter 'pageable' is set
        if (pageable == null) {
            throw new ApiException("Missing the required parameter 'pageable' when calling getAllClinicalTrialsGovConditions(Async)");
        }
        

        okhttp3.Call localVarCall = getAllClinicalTrialsGovConditionsCall(criteria, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @param pageable  (required)
     * @return List&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ClinicalTrialsGovCondition> getAllClinicalTrialsGovConditions(ClinicalTrialsGovConditionCriteria criteria, Pageable pageable) throws ApiException {
        ApiResponse<List<ClinicalTrialsGovCondition>> localVarResp = getAllClinicalTrialsGovConditionsWithHttpInfo(criteria, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param criteria  (required)
     * @param pageable  (required)
     * @return ApiResponse&lt;List&lt;ClinicalTrialsGovCondition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClinicalTrialsGovCondition>> getAllClinicalTrialsGovConditionsWithHttpInfo(ClinicalTrialsGovConditionCriteria criteria, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = getAllClinicalTrialsGovConditionsValidateBeforeCall(criteria, pageable, null);
        Type localVarReturnType = new TypeToken<List<ClinicalTrialsGovCondition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param criteria  (required)
     * @param pageable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllClinicalTrialsGovConditionsAsync(ClinicalTrialsGovConditionCriteria criteria, Pageable pageable, final ApiCallback<List<ClinicalTrialsGovCondition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllClinicalTrialsGovConditionsValidateBeforeCall(criteria, pageable, _callback);
        Type localVarReturnType = new TypeToken<List<ClinicalTrialsGovCondition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClinicalTrialsGovCondition
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClinicalTrialsGovConditionCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClinicalTrialsGovConditionValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClinicalTrialsGovCondition(Async)");
        }
        

        okhttp3.Call localVarCall = getClinicalTrialsGovConditionCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ClinicalTrialsGovCondition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClinicalTrialsGovCondition getClinicalTrialsGovCondition(Long id) throws ApiException {
        ApiResponse<ClinicalTrialsGovCondition> localVarResp = getClinicalTrialsGovConditionWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @return ApiResponse&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClinicalTrialsGovCondition> getClinicalTrialsGovConditionWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getClinicalTrialsGovConditionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClinicalTrialsGovConditionAsync(Long id, final ApiCallback<ClinicalTrialsGovCondition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClinicalTrialsGovConditionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for partialUpdateClinicalTrialsGovCondition
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateClinicalTrialsGovConditionCall(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clinicalTrialsGovCondition;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "application/merge-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partialUpdateClinicalTrialsGovConditionValidateBeforeCall(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling partialUpdateClinicalTrialsGovCondition(Async)");
        }
        
        // verify the required parameter 'clinicalTrialsGovCondition' is set
        if (clinicalTrialsGovCondition == null) {
            throw new ApiException("Missing the required parameter 'clinicalTrialsGovCondition' when calling partialUpdateClinicalTrialsGovCondition(Async)");
        }
        

        okhttp3.Call localVarCall = partialUpdateClinicalTrialsGovConditionCall(id, clinicalTrialsGovCondition, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @return ClinicalTrialsGovCondition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClinicalTrialsGovCondition partialUpdateClinicalTrialsGovCondition(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        ApiResponse<ClinicalTrialsGovCondition> localVarResp = partialUpdateClinicalTrialsGovConditionWithHttpInfo(id, clinicalTrialsGovCondition);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @return ApiResponse&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClinicalTrialsGovCondition> partialUpdateClinicalTrialsGovConditionWithHttpInfo(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        okhttp3.Call localVarCall = partialUpdateClinicalTrialsGovConditionValidateBeforeCall(id, clinicalTrialsGovCondition, null);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call partialUpdateClinicalTrialsGovConditionAsync(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback<ClinicalTrialsGovCondition> _callback) throws ApiException {

        okhttp3.Call localVarCall = partialUpdateClinicalTrialsGovConditionValidateBeforeCall(id, clinicalTrialsGovCondition, _callback);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchClinicalTrialsGovConditions
     * @param query  (required)
     * @param pageable  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchClinicalTrialsGovConditionsCall(String query, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/_search/clinical-trials-gov-conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchClinicalTrialsGovConditionsValidateBeforeCall(String query, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchClinicalTrialsGovConditions(Async)");
        }
        
        // verify the required parameter 'pageable' is set
        if (pageable == null) {
            throw new ApiException("Missing the required parameter 'pageable' when calling searchClinicalTrialsGovConditions(Async)");
        }
        

        okhttp3.Call localVarCall = searchClinicalTrialsGovConditionsCall(query, pageable, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param query  (required)
     * @param pageable  (required)
     * @return List&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ClinicalTrialsGovCondition> searchClinicalTrialsGovConditions(String query, Pageable pageable) throws ApiException {
        ApiResponse<List<ClinicalTrialsGovCondition>> localVarResp = searchClinicalTrialsGovConditionsWithHttpInfo(query, pageable);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param query  (required)
     * @param pageable  (required)
     * @return ApiResponse&lt;List&lt;ClinicalTrialsGovCondition&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ClinicalTrialsGovCondition>> searchClinicalTrialsGovConditionsWithHttpInfo(String query, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = searchClinicalTrialsGovConditionsValidateBeforeCall(query, pageable, null);
        Type localVarReturnType = new TypeToken<List<ClinicalTrialsGovCondition>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param query  (required)
     * @param pageable  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchClinicalTrialsGovConditionsAsync(String query, Pageable pageable, final ApiCallback<List<ClinicalTrialsGovCondition>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchClinicalTrialsGovConditionsValidateBeforeCall(query, pageable, _callback);
        Type localVarReturnType = new TypeToken<List<ClinicalTrialsGovCondition>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClinicalTrialsGovCondition
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClinicalTrialsGovConditionCall(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = clinicalTrialsGovCondition;

        // create path and map variables
        String localVarPath = "/api/clinical-trials-gov-conditions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClinicalTrialsGovConditionValidateBeforeCall(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateClinicalTrialsGovCondition(Async)");
        }
        
        // verify the required parameter 'clinicalTrialsGovCondition' is set
        if (clinicalTrialsGovCondition == null) {
            throw new ApiException("Missing the required parameter 'clinicalTrialsGovCondition' when calling updateClinicalTrialsGovCondition(Async)");
        }
        

        okhttp3.Call localVarCall = updateClinicalTrialsGovConditionCall(id, clinicalTrialsGovCondition, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @return ClinicalTrialsGovCondition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ClinicalTrialsGovCondition updateClinicalTrialsGovCondition(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        ApiResponse<ClinicalTrialsGovCondition> localVarResp = updateClinicalTrialsGovConditionWithHttpInfo(id, clinicalTrialsGovCondition);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @return ApiResponse&lt;ClinicalTrialsGovCondition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClinicalTrialsGovCondition> updateClinicalTrialsGovConditionWithHttpInfo(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition) throws ApiException {
        okhttp3.Call localVarCall = updateClinicalTrialsGovConditionValidateBeforeCall(id, clinicalTrialsGovCondition, null);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param clinicalTrialsGovCondition  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClinicalTrialsGovConditionAsync(Long id, ClinicalTrialsGovCondition clinicalTrialsGovCondition, final ApiCallback<ClinicalTrialsGovCondition> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClinicalTrialsGovConditionValidateBeforeCall(id, clinicalTrialsGovCondition, _callback);
        Type localVarReturnType = new TypeToken<ClinicalTrialsGovCondition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
