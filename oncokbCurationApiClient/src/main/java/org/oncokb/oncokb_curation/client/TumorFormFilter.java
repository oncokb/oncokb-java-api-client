/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.oncokb.oncokb_curation.client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * TumorFormFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TumorFormFilter implements Serializable {
  private static final long serialVersionUID = 1L;

  /**
   * Gets or Sets equals
   */
  @JsonAdapter(EqualsEnum.Adapter.class)
  public enum EqualsEnum {
    SOLID("SOLID"),
    
    LIQUID("LIQUID"),
    
    MIXED("MIXED");

    private String value;

    EqualsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EqualsEnum fromValue(String value) {
      for (EqualsEnum b : EqualsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EqualsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EqualsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EqualsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EqualsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EQUALS = "equals";
  @SerializedName(SERIALIZED_NAME_EQUALS)
  private EqualsEnum equals;

  /**
   * Gets or Sets notEquals
   */
  @JsonAdapter(NotEqualsEnum.Adapter.class)
  public enum NotEqualsEnum {
    SOLID("SOLID"),
    
    LIQUID("LIQUID"),
    
    MIXED("MIXED");

    private String value;

    NotEqualsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotEqualsEnum fromValue(String value) {
      for (NotEqualsEnum b : NotEqualsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotEqualsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotEqualsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotEqualsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotEqualsEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NOT_EQUALS = "notEquals";
  @SerializedName(SERIALIZED_NAME_NOT_EQUALS)
  private NotEqualsEnum notEquals;

  public static final String SERIALIZED_NAME_SPECIFIED = "specified";
  @SerializedName(SERIALIZED_NAME_SPECIFIED)
  private Boolean specified;

  /**
   * Gets or Sets in
   */
  @JsonAdapter(InEnum.Adapter.class)
  public enum InEnum {
    SOLID("SOLID"),
    
    LIQUID("LIQUID"),
    
    MIXED("MIXED");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private List<InEnum> in = null;

  /**
   * Gets or Sets notIn
   */
  @JsonAdapter(NotInEnum.Adapter.class)
  public enum NotInEnum {
    SOLID("SOLID"),
    
    LIQUID("LIQUID"),
    
    MIXED("MIXED");

    private String value;

    NotInEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NotInEnum fromValue(String value) {
      for (NotInEnum b : NotInEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NotInEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotInEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NotInEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NotInEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_NOT_IN = "notIn";
  @SerializedName(SERIALIZED_NAME_NOT_IN)
  private List<NotInEnum> notIn = null;

  public TumorFormFilter() { 
  }

  public TumorFormFilter equals(EqualsEnum equals) {
    
    this.equals = equals;
    return this;
  }

   /**
   * Get equals
   * @return equals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EqualsEnum getEquals() {
    return equals;
  }


  public void setEquals(EqualsEnum equals) {
    this.equals = equals;
  }


  public TumorFormFilter notEquals(NotEqualsEnum notEquals) {
    
    this.notEquals = notEquals;
    return this;
  }

   /**
   * Get notEquals
   * @return notEquals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NotEqualsEnum getNotEquals() {
    return notEquals;
  }


  public void setNotEquals(NotEqualsEnum notEquals) {
    this.notEquals = notEquals;
  }


  public TumorFormFilter specified(Boolean specified) {
    
    this.specified = specified;
    return this;
  }

   /**
   * Get specified
   * @return specified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getSpecified() {
    return specified;
  }


  public void setSpecified(Boolean specified) {
    this.specified = specified;
  }


  public TumorFormFilter in(List<InEnum> in) {
    
    this.in = in;
    return this;
  }

  public TumorFormFilter addInItem(InEnum inItem) {
    if (this.in == null) {
      this.in = new ArrayList<InEnum>();
    }
    this.in.add(inItem);
    return this;
  }

   /**
   * Get in
   * @return in
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<InEnum> getIn() {
    return in;
  }


  public void setIn(List<InEnum> in) {
    this.in = in;
  }


  public TumorFormFilter notIn(List<NotInEnum> notIn) {
    
    this.notIn = notIn;
    return this;
  }

  public TumorFormFilter addNotInItem(NotInEnum notInItem) {
    if (this.notIn == null) {
      this.notIn = new ArrayList<NotInEnum>();
    }
    this.notIn.add(notInItem);
    return this;
  }

   /**
   * Get notIn
   * @return notIn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NotInEnum> getNotIn() {
    return notIn;
  }


  public void setNotIn(List<NotInEnum> notIn) {
    this.notIn = notIn;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TumorFormFilter tumorFormFilter = (TumorFormFilter) o;
    return Objects.equals(this.equals, tumorFormFilter.equals) &&
        Objects.equals(this.notEquals, tumorFormFilter.notEquals) &&
        Objects.equals(this.specified, tumorFormFilter.specified) &&
        Objects.equals(this.in, tumorFormFilter.in) &&
        Objects.equals(this.notIn, tumorFormFilter.notIn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(equals, notEquals, specified, in, notIn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TumorFormFilter {\n");
    sb.append("    equals: ").append(toIndentedString(equals)).append("\n");
    sb.append("    notEquals: ").append(toIndentedString(notEquals)).append("\n");
    sb.append("    specified: ").append(toIndentedString(specified)).append("\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    notIn: ").append(toIndentedString(notIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

