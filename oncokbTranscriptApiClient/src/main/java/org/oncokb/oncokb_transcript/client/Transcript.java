/*
 * oncokb-transcript API
 * oncokb-transcript API documentation
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.oncokb.oncokb_transcript.client;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.oncokb.oncokb_transcript.client.EnsemblGene;
import org.oncokb.oncokb_transcript.client.GenomeFragment;
import org.oncokb.oncokb_transcript.client.Sequence;
import java.io.Serializable;
/**
 * Transcript
 */


public class Transcript implements Serializable{
  private static final long serialVersionUID = 1L;
  @SerializedName("canonical")
  private Boolean canonical = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("ensemblGene")
  private EnsemblGene ensemblGene = null;

  @SerializedName("ensemblProteinId")
  private String ensemblProteinId = null;

  @SerializedName("ensemblTranscriptId")
  private String ensemblTranscriptId = null;

  @SerializedName("fragments")
  private List<GenomeFragment> fragments = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("referenceSequenceId")
  private String referenceSequenceId = null;

  @SerializedName("sequences")
  private List<Sequence> sequences = null;

  public Transcript canonical(Boolean canonical) {
    this.canonical = canonical;
    return this;
  }

   /**
   * Get canonical
   * @return canonical
  **/
  @Schema(required = true, description = "")
  public Boolean isCanonical() {
    return canonical;
  }

  public void setCanonical(Boolean canonical) {
    this.canonical = canonical;
  }

  public Transcript description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Transcript ensemblGene(EnsemblGene ensemblGene) {
    this.ensemblGene = ensemblGene;
    return this;
  }

   /**
   * Get ensemblGene
   * @return ensemblGene
  **/
  @Schema(description = "")
  public EnsemblGene getEnsemblGene() {
    return ensemblGene;
  }

  public void setEnsemblGene(EnsemblGene ensemblGene) {
    this.ensemblGene = ensemblGene;
  }

  public Transcript ensemblProteinId(String ensemblProteinId) {
    this.ensemblProteinId = ensemblProteinId;
    return this;
  }

   /**
   * Get ensemblProteinId
   * @return ensemblProteinId
  **/
  @Schema(description = "")
  public String getEnsemblProteinId() {
    return ensemblProteinId;
  }

  public void setEnsemblProteinId(String ensemblProteinId) {
    this.ensemblProteinId = ensemblProteinId;
  }

  public Transcript ensemblTranscriptId(String ensemblTranscriptId) {
    this.ensemblTranscriptId = ensemblTranscriptId;
    return this;
  }

   /**
   * Get ensemblTranscriptId
   * @return ensemblTranscriptId
  **/
  @Schema(description = "")
  public String getEnsemblTranscriptId() {
    return ensemblTranscriptId;
  }

  public void setEnsemblTranscriptId(String ensemblTranscriptId) {
    this.ensemblTranscriptId = ensemblTranscriptId;
  }

  public Transcript fragments(List<GenomeFragment> fragments) {
    this.fragments = fragments;
    return this;
  }

  public Transcript addFragmentsItem(GenomeFragment fragmentsItem) {
    if (this.fragments == null) {
      this.fragments = new ArrayList<GenomeFragment>();
    }
    this.fragments.add(fragmentsItem);
    return this;
  }

   /**
   * Get fragments
   * @return fragments
  **/
  @Schema(description = "")
  public List<GenomeFragment> getFragments() {
    return fragments;
  }

  public void setFragments(List<GenomeFragment> fragments) {
    this.fragments = fragments;
  }

  public Transcript id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Transcript referenceSequenceId(String referenceSequenceId) {
    this.referenceSequenceId = referenceSequenceId;
    return this;
  }

   /**
   * Get referenceSequenceId
   * @return referenceSequenceId
  **/
  @Schema(description = "")
  public String getReferenceSequenceId() {
    return referenceSequenceId;
  }

  public void setReferenceSequenceId(String referenceSequenceId) {
    this.referenceSequenceId = referenceSequenceId;
  }

  public Transcript sequences(List<Sequence> sequences) {
    this.sequences = sequences;
    return this;
  }

  public Transcript addSequencesItem(Sequence sequencesItem) {
    if (this.sequences == null) {
      this.sequences = new ArrayList<Sequence>();
    }
    this.sequences.add(sequencesItem);
    return this;
  }

   /**
   * Get sequences
   * @return sequences
  **/
  @Schema(description = "")
  public List<Sequence> getSequences() {
    return sequences;
  }

  public void setSequences(List<Sequence> sequences) {
    this.sequences = sequences;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transcript transcript = (Transcript) o;
    return Objects.equals(this.canonical, transcript.canonical) &&
        Objects.equals(this.description, transcript.description) &&
        Objects.equals(this.ensemblGene, transcript.ensemblGene) &&
        Objects.equals(this.ensemblProteinId, transcript.ensemblProteinId) &&
        Objects.equals(this.ensemblTranscriptId, transcript.ensemblTranscriptId) &&
        Objects.equals(this.fragments, transcript.fragments) &&
        Objects.equals(this.id, transcript.id) &&
        Objects.equals(this.referenceSequenceId, transcript.referenceSequenceId) &&
        Objects.equals(this.sequences, transcript.sequences);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canonical, description, ensemblGene, ensemblProteinId, ensemblTranscriptId, fragments, id, referenceSequenceId, sequences);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transcript {\n");
    
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ensemblGene: ").append(toIndentedString(ensemblGene)).append("\n");
    sb.append("    ensemblProteinId: ").append(toIndentedString(ensemblProteinId)).append("\n");
    sb.append("    ensemblTranscriptId: ").append(toIndentedString(ensemblTranscriptId)).append("\n");
    sb.append("    fragments: ").append(toIndentedString(fragments)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    referenceSequenceId: ").append(toIndentedString(referenceSequenceId)).append("\n");
    sb.append("    sequences: ").append(toIndentedString(sequences)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
