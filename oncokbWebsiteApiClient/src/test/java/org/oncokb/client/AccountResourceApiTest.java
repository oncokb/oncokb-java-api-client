/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * OpenAPI spec version: v1.0.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.oncokb.client;

import org.oncokb.ApiException;
import org.oncokb.client.KeyAndPasswordVM;
import org.oncokb.client.KeyAndTermsVM;
import org.oncokb.client.LoginVM;
import org.oncokb.client.ManagedUserVM;
import org.oncokb.client.PasswordChangeDTO;
import org.oncokb.client.Token;
import org.oncokb.client.UserDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountResourceApi
 */
@Ignore
public class AccountResourceApiTest {

    private final AccountResourceApi api = new AccountResourceApi();

    /**
     * activateAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activateAccountUsingGETTest() throws ApiException {
        String key = null;
        Boolean response = api.activateAccountUsingGET(key);

        // TODO: test validations
    }
    /**
     * changePassword
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void changePasswordUsingPOSTTest() throws ApiException {
        PasswordChangeDTO body = null;
        api.changePasswordUsingPOST(body);

        // TODO: test validations
    }
    /**
     * createToken
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenUsingPOSTTest() throws ApiException {
        Token response = api.createTokenUsingPOST();

        // TODO: test validations
    }
    /**
     * deleteToken
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTokenUsingDELETETest() throws ApiException {
        Token body = null;
        api.deleteTokenUsingDELETE(body);

        // TODO: test validations
    }
    /**
     * finishPasswordReset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finishPasswordResetUsingPOSTTest() throws ApiException {
        KeyAndPasswordVM body = null;
        api.finishPasswordResetUsingPOST(body);

        // TODO: test validations
    }
    /**
     * finishTrialAccountActivation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void finishTrialAccountActivationUsingPOSTTest() throws ApiException {
        KeyAndTermsVM body = null;
        UserDTO response = api.finishTrialAccountActivationUsingPOST(body);

        // TODO: test validations
    }
    /**
     * generateResetKey
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateResetKeyUsingPOSTTest() throws ApiException {
        String body = null;
        UserDTO response = api.generateResetKeyUsingPOST(body);

        // TODO: test validations
    }
    /**
     * getAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountUsingGETTest() throws ApiException {
        UserDTO response = api.getAccountUsingGET();

        // TODO: test validations
    }
    /**
     * getTokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTokensUsingGETTest() throws ApiException {
        List<Token> response = api.getTokensUsingGET();

        // TODO: test validations
    }
    /**
     * getTrialAccountActivationInfo
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrialAccountActivationInfoUsingGETTest() throws ApiException {
        String key = null;
        UserDTO response = api.getTrialAccountActivationInfoUsingGET(key);

        // TODO: test validations
    }
    /**
     * initiateTrialAccountActivation
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void initiateTrialAccountActivationUsingPOSTTest() throws ApiException {
        String body = null;
        UserDTO response = api.initiateTrialAccountActivationUsingPOST(body);

        // TODO: test validations
    }
    /**
     * isAuthenticated
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void isAuthenticatedUsingGETTest() throws ApiException {
        String response = api.isAuthenticatedUsingGET();

        // TODO: test validations
    }
    /**
     * registerAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void registerAccountUsingPOSTTest() throws ApiException {
        ManagedUserVM body = null;
        api.registerAccountUsingPOST(body);

        // TODO: test validations
    }
    /**
     * requestPasswordReset
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void requestPasswordResetUsingPOSTTest() throws ApiException {
        String body = null;
        api.requestPasswordResetUsingPOST(body);

        // TODO: test validations
    }
    /**
     * resendVerification
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendVerificationUsingPOSTTest() throws ApiException {
        LoginVM body = null;
        api.resendVerificationUsingPOST(body);

        // TODO: test validations
    }
    /**
     * saveAccount
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveAccountUsingPOSTTest() throws ApiException {
        UserDTO body = null;
        api.saveAccountUsingPOST(body);

        // TODO: test validations
    }
}
