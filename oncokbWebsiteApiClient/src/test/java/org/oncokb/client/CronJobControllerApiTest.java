/*
 * OncoKB APIs
 * OncoKB, a comprehensive and curated precision oncology knowledge base, offers oncologists detailed, evidence-based information about individual somatic mutations and structural alterations present in patient tumors with the goal of supporting optimal treatment decisions.
 *
 * OpenAPI spec version: v1.0.0
 * Contact: contact@oncokb.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.oncokb.client;

import org.oncokb.ApiException;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CronJobControllerApi
 */
@Ignore
public class CronJobControllerApiTest {

    private final CronJobControllerApi api = new CronJobControllerApi();

    /**
     * analyzeUserUsage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void analyzeUserUsageUsingGETTest() throws ApiException {
        api.analyzeUserUsageUsingGET();

        // TODO: test validations
    }
    /**
     * checkExposedTokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkExposedTokensUsingGETTest() throws ApiException {
        api.checkExposedTokensUsingGET();

        // TODO: test validations
    }
    /**
     * checkTrialAccounts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkTrialAccountsUsingGETTest() throws ApiException {
        api.checkTrialAccountsUsingGET();

        // TODO: test validations
    }
    /**
     * emailUnapprovedUsersList
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailUnapprovedUsersListUsingGETTest() throws ApiException {
        api.emailUnapprovedUsersListUsingGET();

        // TODO: test validations
    }
    /**
     * generateTokens
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateTokensUsingGETTest() throws ApiException {
        api.generateTokensUsingGET();

        // TODO: test validations
    }
    /**
     * removeNotActivatedUsers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeNotActivatedUsersUsingGETTest() throws ApiException {
        api.removeNotActivatedUsersUsingGET();

        // TODO: test validations
    }
    /**
     * removeOldAuditEvents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeOldAuditEventsUsingGETTest() throws ApiException {
        api.removeOldAuditEventsUsingGET();

        // TODO: test validations
    }
    /**
     * removeOldTokenStats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeOldTokenStatsUsingGETTest() throws ApiException {
        api.removeOldTokenStatsUsingGET();

        // TODO: test validations
    }
    /**
     * tokensRenewCheck
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void tokensRenewCheckUsingGETTest() throws ApiException {
        api.tokensRenewCheckUsingGET();

        // TODO: test validations
    }
    /**
     * updateTokenStats
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTokenStatsUsingGETTest() throws ApiException {
        api.updateTokenStatsUsingGET();

        // TODO: test validations
    }
}
